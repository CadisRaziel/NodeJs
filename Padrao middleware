//Middleware pattern ( chain of responsibility ) = padrao de projeto web

//ctx = contexto
const passo1 = (ctx, next) => {
    ctx.valor1 = 'mid1'
    next()
}

const passo2 = (ctx, next) => {
    ctx.valor2 = 'mid2'
    next()
}

const passo3 = (ctx, next) => ctx.valor3 = 'mid3' //veja que aqui nao colocamos NEXT, assim não chamara o proximo passo


const exec = (ctx, ...middlewares) => {
    const execPasso = indice => {
        middlewares && indice < middlewares.length && 
            middlewares[indice](ctx, () => execPasso(indice + 1))
    }
    execPasso(0) //para que inicie no indice 0
}

const ctx = {}
exec(ctx, passo1, passo2, passo3)

//posso inverter as ordens
exec(ctx, passo2, passo1, passo3)

//posso ignorar um passo
exec(ctx, passo1, passo3)

//repare que como o passo 3 não chama o next ele só executa ele mesmo
exec(ctx, passo3)
console.log(ctx)
